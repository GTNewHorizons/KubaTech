/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */

dependencies {
    api('com.github.GTNewHorizons:GT5-Unofficial:5.09.44.92-pre:dev')
    api("com.github.GTNewHorizons:EnderCore:0.2.18:dev")
    api("com.github.GTNewHorizons:EnderIO:2.5.4:dev")
    api("com.github.GTNewHorizons:ForestryMC:4.7.0:dev")
    api("com.github.GTNewHorizons:ModularUI:1.1.22:dev")
    api("com.github.GTNewHorizons:Mobs-Info:0.1.10-GTNH:dev")
    devOnlyNonPublishable("com.github.GTNewHorizons:Infernal-Mobs:1.7.9-GTNH:dev")
    //compileOnly("curse.maven:extrautilities-225561:2264384") {
    //    transitive = false
    //}
    compileOnly("com.github.GTNewHorizons:GTplusplus:1.10.35-pre:dev")
    {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:BloodMagic:1.4.3:dev")
    {
        transitive = false
    }
    compileOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev")
    {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:CraftTweaker:3.2.13:dev")
    {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:bartworks:0.8.17-pre:dev")
    {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:NewHorizonsCoreMod:2.2.42-pre:dev")
    {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:BetterLoadingScreen:1.5.2-GTNH:dev")
    {
        transitive = false
    }
    runtimeOnly("com.github.GTNewHorizons:Baubles:1.0.1.16:dev")
    runtimeOnly("curse.maven:cofh-core-69162:2388751")
    /*
    {
        exclude group:"com.github.GTNewHorizons", module:"SpongePoweredMixin"
        exclude group:"com.github.GTNewHorizons", module:"SpongeMixins"
    }
    */

    // For testing
    //runtimeOnly("com.github.GTNewHorizons:BetterLoadingScreen:1.5.2-GTNH:dev")
    //runtimeOnly("com.github.GTNewHorizons:GTplusplus:1.10.30:dev")
    //runtimeOnly("com.github.GTNewHorizons:harvestcraft:1.1.1-GTNH:dev")
    //runtimeOnly("com.github.GTNewHorizons:NewHorizonsCoreMod:2.2.38:dev")
    //runtimeOnly("com.github.GTNewHorizons:OpenBlocks:1.7.1-GTNH:dev")
    //runtimeOnly("com.github.GTNewHorizons:bartworks:0.8.12:dev")
    //runtimeOnly("com.github.GTNewHorizons:CraftTweaker:3.2.13:dev")
    //api("com.github.GTNewHorizons:SpecialMobs:3.4.3:dev")
    //api("com.github.GTNewHorizons:twilightforest:2.5.1:dev")
    //api("com.github.GTNewHorizons:EnderZoo:1.0.23:dev")
    runtimeOnly("com.github.GTNewHorizons:Draconic-Evolution:1.2.1-GTNH:dev")
    //runtimeOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev")
    //runtimeOnly("com.github.GTNewHorizons:BloodMagic:1.4.3:dev")
    //api("curse.maven:witchery-69673:2234410")
}
